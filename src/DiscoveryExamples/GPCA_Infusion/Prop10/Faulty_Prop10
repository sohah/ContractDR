-- RESULT :


-- Tried

-- INITIAL PROPERTY:
-- TIGHT 1:
-- TIGHT 2:
-- TIGHT 3:
-- TIGHT 4:
-- TIGHT 5:


repair node discover_binary_Bool_0_Int_4_Terms2(i0:int; i1:int; i2:int;i3:int)
[valhole_0: inthole;
valhole_1:inthole;

const_hole0: inthole;
const_hole1 : inthole;

level_0_hole:inthole;
level_1_hole:inthole;
level_2_hole:inthole

]

returns (out: bool);
var

leaf_0:bool;
leaf_1:bool;

bExprlevel_1:bool;

let

    leaf_0 = if(valhole_0 = 0) then i0 <= const_hole0
                   else if(valhole_0 = 2) then i0 > const_hole0
                   else if(valhole_0 = 3) then i0 = const_hole0
                   else if(valhole_0 = 4) then i1 <= const_hole0
                   else if(valhole_0 = 5) then i1 > const_hole0
                   else if(valhole_0 = 6) then i1 = const_hole0
                   else if(valhole_0 = 7) then i2 <= const_hole0
                   else if(valhole_0 = 8) then i2 > const_hole0
                   else if(valhole_0 = 9) then i2 = const_hole0
                   else if(valhole_0 = 10) then i3 <= const_hole0
                   else if(valhole_0 = 11) then i3 > const_hole0
                   else i3 = const_hole0;



    leaf_1 = if(valhole_1 = 0) then i0 <= const_hole1
                   else if(valhole_1 = 2) then i0 > const_hole1
                   else if(valhole_1 = 3) then i0 = const_hole1
                   else if(valhole_1 = 4) then i1 <= const_hole1
                   else if(valhole_1 = 5) then i1 > const_hole1
                   else if(valhole_1 = 6) then i1 = const_hole1
                   else if(valhole_1 = 7) then i2 <= const_hole1
                   else if(valhole_1 = 8) then i2 > const_hole1
                   else if(valhole_1 = 9) then i2 = const_hole1
                   else if(valhole_1 = 10) then i3 <= const_hole1
                   else if(valhole_1 = 11) then i3 > const_hole1
                   else  i3 = const_hole1;



    bExprlevel_1 =  if(level_2_hole = 1) then leaf_0 and leaf_1
                   else if(level_2_hole = 2) then leaf_0 or leaf_1
                   else if(level_2_hole = 3) then leaf_0 => leaf_1
                   else if(level_2_hole = 4) then leaf_0 xor leaf_1
                   else if(level_2_hole = 5) then not leaf_0
                   else if(level_2_hole = 6) then not leaf_1
                   else if(level_2_hole = 7) then true
                   else false;


    out = bExprlevel_1;
tel;

node main(
 System_On: bool;
             Infusion_Initiate:bool;
             Infusion_Inhibit:bool;
             Infusion_Cancel:bool;
             Patient_Bolus_Request:bool;
             Infusion_Total_Duration:int;
             VTBI_Total:int;
             Flow_Rate_Basal:int;
             Flow_Rate_Intermittent_Bolus:int;
             Duration_Intermittent_Bolus:int;
             Interval_Intermittent_Bolus:int;
             Flow_Rate_Patient_Bolus:int;
             Duration_Patient_Bolus:int;
             Lockout_Period_Patient_Bolus:int;
             Max_Number_of_Patient_Bolus:int;
             Flow_Rate_KVO:int;
             Entered_Reservoir_Volume:int;
             Configured:int;
             Highest_Level_Alarm:int;
             Reservoir_Empty:bool;
             Volume_Infused:int;
             Commanded_Flow_Rate:int;
             Current_System_Mode:int;
             New_Infusion:bool;
             Log_Message_ID:int;
             Actual_Infusion_Duration:int
) returns (p1: bool);


let  -- Prop10: mode_basal_implies_infusion_rate_basal

    p1 = true -> (System_On and Current_System_Mode = 2 ) => Commanded_Flow_Rate = Flow_Rate_Basal;
      --%PROPERTY p1;

tel;
