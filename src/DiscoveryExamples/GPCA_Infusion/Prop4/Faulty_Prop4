
node main(
 System_On: bool;
             Infusion_Initiate:bool;
             Infusion_Inhibit:bool;
             Infusion_Cancel:bool;
             Patient_Bolus_Request:bool;
             Infusion_Total_Duration:int;
             VTBI_Total:int;
             Flow_Rate_Basal:int;
             Flow_Rate_Intermittent_Bolus:int;
             Duration_Intermittent_Bolus:int;
             Interval_Intermittent_Bolus:int;
             Flow_Rate_Patient_Bolus:int;
             Duration_Patient_Bolus:int;
             Lockout_Period_Patient_Bolus:int;
             Max_Number_of_Patient_Bolus:int;
             Flow_Rate_KVO:int;
             Entered_Reservoir_Volume:int;
             Configured:int;
             Highest_Level_Alarm:int;
             Reservoir_Empty:bool;
             Volume_Infused:int;
             Commanded_Flow_Rate:int;
             Current_System_Mode:int;
             New_Infusion:bool;
             Log_Message_ID:int;
             Actual_Infusion_Duration:int
) returns (p1: bool);

let --prop4: alarm_L3_implies_flow_kvo

  (*assert( 0 <= Infusion_Total_Duration ) ;
  assert( 0 <= Flow_Rate_Intermittent_Bolus ) ;
  assert( 0 <= Duration_Intermittent_Bolus ) ;
  assert( 0 <= Interval_Intermittent_Bolus ) ;
  assert( 0 <= Lockout_Period_Patient_Bolus ) ;
  assert( 0 <= Max_Number_of_Patient_Bolus ) ;
  assert( 0 <= Entered_Reservoir_Volume ) ;
  assert( 0 <= Highest_Level_Alarm ) ;
  assert( 0 <= Volume_Infused ) ;
  assert( 0 <= Commanded_Flow_Rate ) ;
  assert( 0 <= Current_System_Mode ) ;
  assert( 0 <= Log_Message_ID ) ;
  assert( 0 <= Actual_Infusion_Duration ) ;


    assert( 255 >=Infusion_Total_Duration ) ;
    assert( 255 >=Flow_Rate_Intermittent_Bolus ) ;
    assert( 255 >=Duration_Intermittent_Bolus ) ;
    assert( 255 >=Interval_Intermittent_Bolus ) ;
    assert( 255 >=Lockout_Period_Patient_Bolus ) ;
    assert( 255 >=Max_Number_of_Patient_Bolus ) ;
    assert( 255 >=Entered_Reservoir_Volume ) ;
    assert( 255 >=Highest_Level_Alarm ) ;
    assert( 255 >=Volume_Infused ) ;
    assert( 255 >=Commanded_Flow_Rate ) ;
    assert( 255 >=Current_System_Mode ) ;
    assert( 255 >=Log_Message_ID ) ;
    assert( 255 >=Actual_Infusion_Duration ) ;
*)

    p1 = (System_On and (Highest_Level_Alarm = 3) => (Commanded_Flow_Rate <= Flow_Rate_KVO));
      --%PROPERTY p1;

tel;
