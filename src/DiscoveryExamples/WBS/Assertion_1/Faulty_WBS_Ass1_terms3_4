repair node discover_binary_Bool_1_Int_4_Terms3_4(a0: bool; i0:int; i1:int; i2:int;i3:int)
[
valhole_0: inthole;
valhole_1:inthole;
valhole_2:inthole;

const_hole0: inthole;
const_hole1 : inthole;

valhole_3: inthole;
valhole_4:inthole;
valhole_5:inthole;

const_hole2: inthole;
const_hole3 : inthole;

]

returns (out: bool);
var

leaf_0:bool;
leaf_1:bool;

bExprlevel_1_0:bool;

leaf_2:bool;
leaf_3:bool;

bExprlevel_1_1:bool;
bExprlevel_2:bool;

let

    leaf_0 = if(valhole_0 = 0) then a0
                   else if(valhole_0 = 1) then i0 <= const_hole0
                   else if(valhole_0 = 2) then i0 > const_hole0
                   else if(valhole_0 = 3) then i0 = const_hole0
                   else if(valhole_0 = 4) then i1 <= const_hole0
                   else if(valhole_0 = 5) then i1 > const_hole0
                   else if(valhole_0 = 6) then i1 = const_hole0
                   else if(valhole_0 = 7) then i2 <= const_hole0
                   else if(valhole_0 = 8) then i2 > const_hole0
                   else if(valhole_0 = 9) then i2 = const_hole0
                   else if(valhole_0 = 10) then i3 <= const_hole0
                   else if(valhole_0 = 11) then i3 > const_hole0
                   else i3 = const_hole0;


    leaf_1 = if(valhole_1 = 0) then a0
                   else if(valhole_1 = 1) then i0 <= const_hole1
                   else if(valhole_1 = 2) then i0 > const_hole1
                   else if(valhole_1 = 3) then i0 = const_hole1
                   else if(valhole_1 = 4) then i1 <= const_hole1
                   else if(valhole_1 = 5) then i1 > const_hole1
                   else if(valhole_1 = 6) then i1 = const_hole1
                   else if(valhole_1 = 7) then i2 <= const_hole1
                   else if(valhole_1 = 8) then i2 > const_hole1
                   else if(valhole_1 = 9) then i2 = const_hole1
                   else if(valhole_1 = 10) then i3 <= const_hole1
                   else if(valhole_1 = 11) then i3 > const_hole1
                   else i3 = const_hole1;


    bExprlevel_1_0 =  if(valhole_2 = 1) then leaf_0 and leaf_1
                   else if(valhole_2 = 2) then leaf_0 or leaf_1
                   else if(valhole_2 = 3) then leaf_0 => leaf_1
                   else if(valhole_2 = 4) then leaf_0 xor leaf_1
                   else if(valhole_2 = 5) then not leaf_0
                   else if(valhole_2 = 6) then not leaf_1
                   else if(valhole_2 = 7) then true
                   else false;



-- the other side of the tree
    leaf_2 = if(valhole_3 = 0) then a0
                   else if(valhole_3 = 1) then i0 <= const_hole2
                   else if(valhole_3 = 2) then i0 > const_hole2
                   else if(valhole_3 = 3) then i0 = const_hole2
                   else if(valhole_3 = 4) then i1 <= const_hole2
                   else if(valhole_3 = 5) then i1 > const_hole2
                   else if(valhole_3 = 6) then i1 = const_hole2
                   else if(valhole_3 = 7) then i2 <= const_hole2
                   else if(valhole_3 = 8) then i2 > const_hole2
                   else if(valhole_3 = 9) then i2 = const_hole2
                   else if(valhole_3 = 10) then i3 <= const_hole2
                   else if(valhole_3 = 11) then i3 > const_hole2
                   else i3 = const_hole2;


    leaf_3 = if(valhole_4 = 0) then a0
                   else if(valhole_4 = 1) then i0 <= const_hole3
                   else if(valhole_4 = 2) then i0 > const_hole3
                   else if(valhole_4 = 3) then i0 = const_hole3
                   else if(valhole_4 = 4) then i1 <= const_hole3
                   else if(valhole_4 = 5) then i1 > const_hole3
                   else if(valhole_4 = 6) then i1 = const_hole3
                   else if(valhole_4 = 7) then i2 <= const_hole3
                   else if(valhole_4 = 8) then i2 > const_hole3
                   else if(valhole_4 = 9) then i2 = const_hole3
                   else if(valhole_4 = 10) then i3 <= const_hole3
                   else if(valhole_4 = 11) then i3 > const_hole3
                   else i3 = const_hole3;


    bExprlevel_1_1 =  if(valhole_5 = 1) then leaf_2 and leaf_3
                   else if(valhole_5 = 2) then leaf_2 or leaf_3
                   else if(valhole_5 = 3) then leaf_2 => leaf_3
                   else if(valhole_5 = 4) then leaf_2 xor leaf_3
                   else if(valhole_5 = 5) then not leaf_2
                   else if(valhole_5 = 6) then not leaf_3
                   else if(valhole_5 = 7) then true
                   else false;


    bExprlevel_2 =  if(valhole_6 = 1) then bExprlevel_1_0 and bExprlevel_1_1
                   else if(valhole_6 = 2) then bExprlevel_1_0 or bExprlevel_1_1
                   else if(valhole_6 = 3) then bExprlevel_1_0 => bExprlevel_1_1
                   else if(valhole_6 = 4) then bExprlevel_1_0 xor bExprlevel_1_1
                   else if(valhole_6 = 5) then not bExprlevel_1_0
                   else if(valhole_6 = 6) then not bExprlevel_1_1
                   else if(valhole_6 = 7) then bExprlevel_1_0
                   else if(valhole_6 = 8) then bExprlevel_1_1
                   else if(valhole_6 = 9) then true
                   else false;

    out = bExprlevel_2;
tel;

node main(pedal_r: int; autoBreak_r: bool; skid_r: bool; NormalPressure_r:int; AltPressure_r:int; Sys_Mode: int) returns (p1: bool);


let

-- introducing a fault in passing assertion #1 in WBS, basically by wrapping the assertion with a not
    p1 = true -> repair(not(pedal_r > 0 and pedal_r <= 4 and not skid_r) => (AltPressure_r > 0 or NormalPressure_r >
        0),discover_binary_Bool_1_Int_4_Terms3_4(autoBreak_r, skid_r, pedal_r, NormalPressure_r, AltPressure_r, Sys_Mode))
         ;

      --%PROPERTY p1;

tel;
