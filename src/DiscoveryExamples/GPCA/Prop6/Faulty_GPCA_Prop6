-- RESULT :


-- Tried

-- INITIAL PROPERTY:
-- TIGHT 1:
-- TIGHT 2:
-- TIGHT 3:
-- TIGHT 4:
-- TIGHT 5:


repair node discover_binary_Bool_0_Int_4_Terms2(i0:int; i1:int; i2:int;i3:int)
[valhole_0: inthole;
valhole_1:inthole;

const_hole0: inthole;
const_hole1 : inthole;

level_0_hole:inthole;
level_1_hole:inthole;
level_2_hole:inthole

]

returns (out: bool);
var

leaf_0:bool;
leaf_1:bool;

bExprlevel_1:bool;

let

    leaf_0 = if(valhole_0 = 0) then i0 <= const_hole0
                   else if(valhole_0 = 2) then i0 > const_hole0
                   else if(valhole_0 = 3) then i0 = const_hole0
                   else if(valhole_0 = 4) then i1 <= const_hole0
                   else if(valhole_0 = 5) then i1 > const_hole0
                   else if(valhole_0 = 6) then i1 = const_hole0
                   else if(valhole_0 = 7) then i2 <= const_hole0
                   else if(valhole_0 = 8) then i2 > const_hole0
                   else if(valhole_0 = 9) then i2 = const_hole0
                   else if(valhole_0 = 10) then i3 <= const_hole0
                   else if(valhole_0 = 11) then i3 > const_hole0
                   else i3 = const_hole0;



    leaf_1 = if(valhole_1 = 0) then i0 <= const_hole1
                   else if(valhole_1 = 2) then i0 > const_hole1
                   else if(valhole_1 = 3) then i0 = const_hole1
                   else if(valhole_1 = 4) then i1 <= const_hole1
                   else if(valhole_1 = 5) then i1 > const_hole1
                   else if(valhole_1 = 6) then i1 = const_hole1
                   else if(valhole_1 = 7) then i2 <= const_hole1
                   else if(valhole_1 = 8) then i2 > const_hole1
                   else if(valhole_1 = 9) then i2 = const_hole1
                   else if(valhole_1 = 10) then i3 <= const_hole1
                   else if(valhole_1 = 11) then i3 > const_hole1
                   else  i3 = const_hole1;



    bExprlevel_1 =  if(level_2_hole = 1) then leaf_0 and leaf_1
                   else if(level_2_hole = 2) then leaf_0 or leaf_1
                   else if(level_2_hole = 3) then leaf_0 => leaf_1
                   else if(level_2_hole = 4) then leaf_0 xor leaf_1
                   else if(level_2_hole = 5) then not leaf_0
                   else if(level_2_hole = 6) then not leaf_1
                   else if(level_2_hole = 7) then true
                   else false;


    out = bExprlevel_1;
tel;

node main(
Commanded_Flow_Rate: int;
Current_System_Mode: int;
System_On: bool;
System_Monitor_Failed:bool;
Logging_Failed:bool;
Infusion_Initiate:bool;
Disable_Audio:int;
Notification_Cancel:bool;
VTBI_High:int;
Flow_Rate_High:int;
Flow_Rate_Low:int;
Flow_Rate:int;
Flow_Rate_Not_Stable:bool;
Air_In_Line:bool;
Occlusion:bool;
Door_Open:bool;
Temp:bool;
Air_Pressure:bool;
Humidity: bool;
Battery_Depleted:bool;
Battery_Low: bool;
Battery_Unable_To_Charge: bool;
Supply_Voltage:bool;
CPU_In_Error:bool;
RTC_In_Error:bool;
Watchdog_Interrupted:bool;
Memory_Corrupted:bool;
Pump_Too_Hot:bool;
Pump_Overheated:bool;
Audio_Enable_Duration:int;
Audio_Level:int;
Config_Warning_Duration:int;
Low_Reservoir:int;
Max_Duration_Over_Infusion:int;
Max_Duration_Under_Infusion:int;
Max_Paused_Duration:int;
Max_Idle_Duration:int;
Tolerance_Max:int;
Tolerance_Min:int;
Reservoir_Empty:bool;
Reservoir_Volume:int;
Volume_Infused:int;
In_Therapy:bool;
Config_Timer:int;
out_Is_Audio_Disabled:int;
out_Notification_Message:int;
out_Audio_Notification_Command:int;
out_Highest_Level_Alarm:int;
out_Log_Message_ID5:int
) returns (p1: bool);


let  -- Prop6: alarm_gte_L3_causes_audio_output_EQ_audio_level

    p1 = true -> (System_On and (out_Highest_Level_Alarm>=3) and (Disable_Audio =0)) =>
repair(((out_Audio_Notification_Command = Audio_Level) and (out_Is_Audio_Disabled=0)),
discover_binary_Bool_0_Int_4_Terms2
(out_s_Audio_Disabled,
out_Notification_Message,out_Highest_Level_Alarm,out_Log_Message_ID5));
      --%PROPERTY p1;

tel;
