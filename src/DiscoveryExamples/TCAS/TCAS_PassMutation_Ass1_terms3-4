repair node discover_binary_Bool_1_Int_4_Terms3_4(a0: bool; i0:int; i1:int; i2:int;i3:int)
[
valhole_0: inthole;
valhole_1:inthole;
valhole_2:inthole;

const_hole0: inthole;
const_hole1 : inthole;

valhole_3: inthole;
valhole_4:inthole;
valhole_5:inthole;

const_hole2: inthole;
const_hole3 : inthole;

]

returns (out: bool);
var

leaf_0:bool;
leaf_1:bool;

bExprlevel_1_0:bool;

leaf_2:bool;
leaf_3:bool;

bExprlevel_1_1:bool;
bExprlevel_2:bool;

let

    leaf_0 = if(valhole_0 = 0) then a0
                   else if(valhole_0 = 1) then i0 <= const_hole0
                   else if(valhole_0 = 2) then i0 > const_hole0
                   else if(valhole_0 = 3) then i0 = const_hole0
                   else if(valhole_0 = 4) then i1 <= const_hole0
                   else if(valhole_0 = 5) then i1 > const_hole0
                   else if(valhole_0 = 6) then i1 = const_hole0
                   else if(valhole_0 = 7) then i2 <= const_hole0
                   else if(valhole_0 = 8) then i2 > const_hole0
                   else if(valhole_0 = 9) then i2 = const_hole0
                   else if(valhole_0 = 10) then i3 <= const_hole0
                   else if(valhole_0 = 11) then i3 > const_hole0
                   else i3 = const_hole0;


    leaf_1 = if(valhole_1 = 0) then a0
                   else if(valhole_1 = 1) then i0 <= const_hole1
                   else if(valhole_1 = 2) then i0 > const_hole1
                   else if(valhole_1 = 3) then i0 = const_hole1
                   else if(valhole_1 = 4) then i1 <= const_hole1
                   else if(valhole_1 = 5) then i1 > const_hole1
                   else if(valhole_1 = 6) then i1 = const_hole1
                   else if(valhole_1 = 7) then i2 <= const_hole1
                   else if(valhole_1 = 8) then i2 > const_hole1
                   else if(valhole_1 = 9) then i2 = const_hole1
                   else if(valhole_1 = 10) then i3 <= const_hole1
                   else if(valhole_1 = 11) then i3 > const_hole1
                   else i3 = const_hole1;


    bExprlevel_1_0 =  if(valhole_2 = 1) then leaf_0 and leaf_1
                   else if(valhole_2 = 2) then leaf_0 or leaf_1
                   else if(valhole_2 = 3) then leaf_0 => leaf_1
                   else if(valhole_2 = 4) then leaf_0 xor leaf_1
                   else if(valhole_2 = 5) then not leaf_0
                   else if(valhole_2 = 6) then not leaf_1
                   else if(valhole_2 = 7) then true
                   else false;



-- the other side of the tree
    leaf_2 = if(valhole_3 = 0) then a0
                   else if(valhole_3 = 1) then i0 <= const_hole2
                   else if(valhole_3 = 2) then i0 > const_hole2
                   else if(valhole_3 = 3) then i0 = const_hole2
                   else if(valhole_3 = 4) then i1 <= const_hole2
                   else if(valhole_3 = 5) then i1 > const_hole2
                   else if(valhole_3 = 6) then i1 = const_hole2
                   else if(valhole_3 = 7) then i2 <= const_hole2
                   else if(valhole_3 = 8) then i2 > const_hole2
                   else if(valhole_3 = 9) then i2 = const_hole2
                   else if(valhole_3 = 10) then i3 <= const_hole2
                   else if(valhole_3 = 11) then i3 > const_hole2
                   else i3 = const_hole2;


    leaf_3 = if(valhole_4 = 0) then a0
                   else if(valhole_4 = 1) then i0 <= const_hole3
                   else if(valhole_4 = 2) then i0 > const_hole3
                   else if(valhole_4 = 3) then i0 = const_hole3
                   else if(valhole_4 = 4) then i1 <= const_hole3
                   else if(valhole_4 = 5) then i1 > const_hole3
                   else if(valhole_4 = 6) then i1 = const_hole3
                   else if(valhole_4 = 7) then i2 <= const_hole3
                   else if(valhole_4 = 8) then i2 > const_hole3
                   else if(valhole_4 = 9) then i2 = const_hole3
                   else if(valhole_4 = 10) then i3 <= const_hole3
                   else if(valhole_4 = 11) then i3 > const_hole3
                   else i3 = const_hole3;


    bExprlevel_1_1 =  if(valhole_5 = 1) then leaf_2 and leaf_3
                   else if(valhole_5 = 2) then leaf_2 or leaf_3
                   else if(valhole_5 = 3) then leaf_2 => leaf_3
                   else if(valhole_5 = 4) then leaf_2 xor leaf_3
                   else if(valhole_5 = 5) then not leaf_2
                   else if(valhole_5 = 6) then not leaf_3
                   else if(valhole_5 = 7) then true
                   else false;


    bExprlevel_2 =  if(valhole_6 = 1) then bExprlevel_1_0 and bExprlevel_1_1
                   else if(valhole_6 = 2) then bExprlevel_1_0 or bExprlevel_1_1
                   else if(valhole_6 = 3) then bExprlevel_1_0 => bExprlevel_1_1
                   else if(valhole_6 = 4) then bExprlevel_1_0 xor bExprlevel_1_1
                   else if(valhole_6 = 5) then not bExprlevel_1_0
                   else if(valhole_6 = 6) then not bExprlevel_1_1
                   else if(valhole_6 = 7) then bExprlevel_1_0
                   else if(valhole_6 = 8) then bExprlevel_1_1
                   else if(valhole_6 = 9) then true
                   else false;

    out = bExprlevel_2;
tel;



node main(Cur_Vertical_Sep_s: int; High_Confidence_flag_s:int; Two_of_Three_Reports_Valid_flag_s:int;
Own_Tracked_Alt_s:int; Own_Tracked_Alt_Rate_s:int; Other_Tracked_Alt_s:int; Alt_Layer_Value_s:int; Up_Separation_s:int;Down_Separation_s:int; Other_RAC_s:int; Other_Capability_s:int; Climb_Inhibit_s:int;
--output
 result_alt_sep_test_s:int; alim_res_s:int) returns (p1:
 bool);


let

-- mutating <> 2 to = 2
-- repairing first passing assertion in TCAS, which should pass. where DOWNWARD_RA is encoded in the implementation as 2. we can have a different encoding for it, but lets keep it like this for now.

    p1 = true -> repair(((Up_Separation_s < alim_res_s) and (Down_Separation_s < alim_res_s))=> (result_alt_sep_test_s
    = 2),
    discover_binary_Bool_0_Int_14_Terms3_4(Cur_Vertical_Sep_s, High_Confidence_flag_s,
    Two_of_Three_Reports_Valid_flag_s, Own_Tracked_Alt_s, Own_Tracked_Alt_Rate_s, Other_Tracked_Alt_s,
    Alt_Layer_Value_s, Up_Separation_s,Down_Separation_s, Other_RAC_s, Other_Capability_s,  Climb_Inhibit_s,
    result_alt_sep_test_s, alim_res_s)) ;

  --%PROPERTY p1;

tel;
